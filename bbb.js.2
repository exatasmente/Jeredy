let app = require('express')();
let http = require('http').Server(app);
let io = require('socket.io')(http);
let b = require('bonescript');
let v = 0;
let conn = false;
var pinos = {
  left:
    {
      front: 'P9_21',
      back: 'P9_16',
      reverse : ['P8_11','P8_15']
    },
  right: {
    front: 'P9_14',
    back: 'P9_22',
   reverse:['P8_12','P8_16']
  }
};

b.pinMode(pinos.left.back, b.OUTPUT);
b.pinMode(pinos.left.front, b.OUTPUT);
b.pinMode(pinos.right.back, b.OUTPUT);
b.pinMode(pinos.right.front, b.OUTPUT);
b.pinMode(pinos.left.reverse[0],b.OUTPUT);
b.pinMode(pinos.right.reverse[0],b.OUTPUT);

b.pinMode(pinos.left.reverse[1],b.OUTPUT);
b.pinMode(pinos.right.reverse[1],b.OUTPUT);

b.digitalWrite(pinos.left.front, 0);
b.digitalWrite(pinos.left.back, 0);
b.digitalWrite(pinos.right.front,0);
b.digitalWrite(pinos.right.back, 0);


io.on('connection', (socket) => {
  socket.on('error',function(){
    conn= false;
    console.log("Erro");
    b.digitalWrite(pinos.left.reverse[0],0);
    b.digitalWrite(pinos.left.reverse[1],0);
    b.digitalWrite(pinos.right.reverse[0],0);
    b.digitalWrite(pinos.right.reverse[1],0);
    b.digitalWrite(pinos.left.front, 0);
    b.digitalWrite(pinos.left.back, 0);
    b.digitalWrite(pinos.right.front, 0);
    b.digitalWrite(pinos.right.back, 0);


    
  });
  socket.on('pair',function(){
    console.log('Nova Conexão');
    if(conn){
      console.log('Negada');
      socket.emit('userOn',{});
    }else{
      console.log('Autorizado');
      socket.emit('userAllowed');
      conn= true;
    }
  });
  socket.on('getRobot',function(cb){
          conn = false;
	  cb({name: 'Jeredy Controller',
                         version: 'Palmas 4.5', 
                         pins: JSON.stringify(pinos)});
  });

  socket.on('latency',function(time,cb){
    console.log(time);
    cb(time);
  });
  socket.on('disconnect', function () {
    conn = false;
    
  });

  socket.on('getPins', function () {
    console.log('pinos');
    
  });

  socket.on('acelerador', function () {
   b.digitalWrite(pinos.left.reverse[0],0);
   b.digitalWrite(pinos.left.reverse[1],0);
   b.digitalWrite(pinos.right.reverse[0],0);
   b.digitalWrite(pinos.right.reverse[1],0);
   console.log("Acelera");
   b.digitalWrite(pinos.left.front, 1);
    b.digitalWrite(pinos.left.back, 1);
    b.digitalWrite(pinos.right.back, 1);
    b.digitalWrite(pinos.right.front, 1);
    
    
  });

  socket.on('freio', function () {

    console.log("Freia");
    b.digitalWrite(pinos.left.reverse[0],0);
    b.digitalWrite(pinos.left.reverse[1],0);
    b.digitalWrite(pinos.right.reverse[0],0);
    b.digitalWrite(pinos.right.reverse[1],0);
    b.digitalWrite(pinos.left.front, 0);
    b.digitalWrite(pinos.left.back, 0);
    b.digitalWrite(pinos.right.front, 0);
    b.digitalWrite(pinos.right.back, 0);

 });
  socket.on('esquerda', function () {
    b.digitalWrite(pinos.left.front, 1);
    b.digitalWrite(pinos.left.back, 1);
    b.digitalWrite(pinos.right.front, 0);
    b.digitalWrite(pinos.right.back, 0);
    b.digitalWrite(pinos.right.reverse[0],1);
    b.digitalWrite(pinos.right.reverse[1],1);
    console.log('Esquerda');
  });
  socket.on('direita', function () {
    b.digitalWrite(pinos.right.front, 1);
    b.digitalWrite(pinos.right.back, 1);
    b.digitalWrite(pinos.left.front, 0);
    b.digitalWrite(pinos.left.back, 0);
    b.digitalWrite(pinos.left.reverse[0],1);
    b.digitalWrite(pinos.left.reverse[1],1);
    console.log('Direita');
  });
  socket.on('reverso', function () {
    console.log("Ré");
    b.digitalWrite(pinos.left.reverse[0], 1);
    b.digitalWrite(pinos.left.reverse[1],1);
    b.digitalWrite(pinos.right.reverse[0],1);
    b.digitalWrite(pinos.right.reverse[1],1);
 });

});

var port = 1337;

http.listen(port, function () {
  console.log('Server Ready');
});



